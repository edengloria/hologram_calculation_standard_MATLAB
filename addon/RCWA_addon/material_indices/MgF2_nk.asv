%%% MgF2  n, k  
% - lambda : 115nm ~ 7000nm
% - Using Lagrange interpolation


function result=MgF2_nk(lambda)

lambda=lambda*10^9;

MgF2_data=[ 
          115.0  1.714  8.6e-6
          115.7  1.7235 7.9e-6
          117.9  1.68   6.2e-6
          119.8  1.651  5.4e-6
          120.0  1.626  5.3e-6
          121.5  1.6275 4.9e-6
          125.0  1.588  4.5e-6
          130.0  1.555  4.0e-6
          135.0  1.5285 3.4e-6
          140.0  1.513  2.9e-6
          150.0  1.484  2.1e-6
          160.0  1.464  1.3e-6
          170.0  1.451  0.8e-6
          180.0  1.440  0.4e-6
          190.0  1.430  0.1e-6
          200.0  1.422  0  
          225.0  1.408    0
          250.0  1.401    0
          275.0  1.397    0
          300.0  1.393    0
          350.0  1.387    0
          400.0  1.382    0
          436.0  1.382    0
          450.0  1.381    0
          488.0  1.380    0 
          500.0  1.381    0
          546.0  1.37770  0
          656.0  1.37661  0
];

this_data = MgF2_data ;

if min(lambda) < this_data(1,1) || max(lambda) > this_data(end,1)
    warning(['Out of valid range (' num2str(this_data(1,1)) ' ~ ' num2str(this_data(end,1)) ' nm)']);
end

in_range = (this_data(1,1) <= lambda).*(lambda <= this_data(end,1)) ;
n = in_range.*(interp1(this_data(:,1), this_data(:,2), lambda, 'spline'))+(1-in_range).*(interp1(this_data(:,1), this_data(:,2), lambda, 'linear')) ;
k = in_range.*(interp1(this_data(:,1), this_data(:,3), lambda, 'spline'))+(1-in_range).*(interp1(this_data(:,1), this_data(:,3), lambda, 'linear')) ;

result=n+j*k;