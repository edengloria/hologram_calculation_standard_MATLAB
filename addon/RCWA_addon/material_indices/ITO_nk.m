%%% Au의 n, k값 구하는 함수 %%%
%   - lambda : 100nm ~ 9919nm
%   - Using Lagrange interpolation


function result=ITO_nk(lambda);

lambda=lambda*10^9;

Au_data=[250	2.3505	0.21134;
260	2.3552	0.18013;
270	2.3513	0.15441;
280	2.3414	0.13317;
290	2.3274	0.1156;
300	2.3105	0.10105;
310	2.2918	0.08901;
320	2.272	0.07905;
330	2.2516	0.07082;
340	2.231	0.06405;
350	2.2106	0.05851;
360	2.1904	0.05401;
370	2.1708	0.05037;
380	2.1516	0.04748;
390	2.1331	0.04523;
400	2.1152	0.0435;
410	2.098	0.04224;
420	2.0815	0.04137;
430	2.0657	0.04083;
440	2.0505	0.04057;
450	2.036	0.04056;
460	2.0221	0.04076;
470	2.0088	0.04114;
480	1.9961	0.04167;
490	1.9839	0.04232;
500	1.9723	0.04309;
510	1.9613	0.04395;
520	1.9507	0.04489;
530	1.9405	0.04589;
540	1.9308	0.04695;
550	1.9216	0.04806;
560	1.9127	0.0492;
570	1.9042	0.05037;
580	1.8961	0.05157;
590	1.8883	0.05278;
600	1.8808	0.05401;
610	1.8737	0.05524;
620	1.8668	0.05648;
630	1.8602	0.05773;
640	1.8539	0.05897;
650	1.8478	0.06022;
660	1.842	0.06145;
670	1.8364	0.06269;
680	1.831	0.06391;
690	1.8259	0.06513;
700	1.8209	0.06633;
710	1.8161	0.06753;
720	1.8115	0.06871;
730	1.807	0.06988;
740	1.8028	0.07104;
750	1.7986	0.07218;
760	1.7946	0.07331;
770	1.7908	0.07443;
780	1.7871	0.07553;
790	1.7835	0.07662;
800	1.7801	0.07769;
810	1.7767	0.07875;
820	1.7735	0.07979;
830	1.7704	0.08082;
840	1.7674	0.08183;
850	1.7645	0.08283;
1500 1.76 0.085 % not verified value
];


this_data = Au_data ;

if min(lambda) < this_data(1,1) || max(lambda) > this_data(end,1)
    warning(['Out of valid range (' num2str(this_data(1,1)) ' ~ ' num2str(this_data(end,1)) ' nm)']);
end

in_range = (this_data(1,1) <= lambda).*(lambda <= this_data(end,1)) ;
n = in_range.*(interp1(this_data(:,1), this_data(:,2), lambda, 'spline'))+(1-in_range).*(interp1(this_data(:,1), this_data(:,2), lambda, 'linear')) ;
k = in_range.*(interp1(this_data(:,1), this_data(:,3), lambda, 'spline'))+(1-in_range).*(interp1(this_data(:,1), this_data(:,3), lambda, 'linear')) ;

result=n+j*k;